/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN Cust_LocationActionsGenerated.js PLEASE EDIT ../Cust_LocationActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import Cust_LocationApi from "../../../api/Cust_LocationApi";

let actionsFunction = {

  //CRUD METHODS

  // Create cust_location
  createCust_Location: function(cust_location) {
    return function(dispatch) {
      return Cust_LocationApi
        .createCust_Location(cust_location)
        .then(cust_location => {
          dispatch(actionsFunction.createCust_LocationSuccess(cust_location));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createCust_LocationSuccess: function(cust_location) {
    return { type: types.CREATE_CUST_LOCATION_SUCCESS, payload: cust_location };
  },


  // Delete cust_location
  deleteCust_Location: function(id) {
    return function(dispatch) {
      return Cust_LocationApi
        .deleteCust_Location(id)
        .then(cust_location => {
          dispatch(actionsFunction.deleteCust_LocationSuccess(cust_location));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteCust_LocationSuccess: function(cust_location) {
    return { type: types.DELETE_CUST_LOCATION_SUCCESS, payload: cust_location };
  },


  // Find by _Customer_Name
  findBy_Customer_Name: function(key) {
    return function(dispatch) {
      return Cust_LocationApi
        .findBy_Customer_Name(key)
        .then(item => {
          dispatch(actionsFunction.findBy_Customer_NameSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_Customer_NameSuccess: function(item) {
    return { type: types.FINDBY_CUSTOMER_NAME_CUST_LOCATION_SUCCESS, payload: item };
  },


  // Get cust_location
  loadCust_Location: function(id) {
    return function(dispatch) {
      return Cust_LocationApi
        .getOneCust_Location(id)
        .then(cust_location => {
          dispatch(actionsFunction.loadCust_LocationSuccess(cust_location));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadCust_LocationSuccess: function(cust_location) {
    return { type: types.GET_CUST_LOCATION_SUCCESS, payload: cust_location };
  },

  // Load  list
  loadCust_LocationList: function() {
    return function(dispatch) {
      return Cust_LocationApi
        .getCust_LocationList()
        .then(list => {
          dispatch(actionsFunction.loadCust_LocationListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadCust_LocationListSuccess: function(list) {
    return { type: types.LIST_CUST_LOCATION_SUCCESS, payload: list };
  },

	
  // Save cust_location
  saveCust_Location: function(cust_location) {
    return function(dispatch) {
      return Cust_LocationApi
        .saveCust_Location(cust_location)
        .then(cust_location => {
          dispatch(actionsFunction.saveCust_LocationSuccess(cust_location));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveCust_LocationSuccess: function(cust_location) {
    return { type: types.UPDATE_CUST_LOCATION_SUCCESS, payload: cust_location };
  },


};

export default actionsFunction;
